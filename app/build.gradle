//plugins {
//    id "me.tatarka.retrolambda" version "3.2.3"
//}

apply plugin: 'com.android.application'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"



    defaultConfig {
        applicationId "demo.thanhbc.com.popularmovies"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }


        debug {
            testCoverageEnabled = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

//    sourceSets {
//        androidTest.setRoot('src/test')
//    }

    lintOptions {
//        abortOnError false
        disable 'InvalidPackage'
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }


    //!! REMARK !!
    //add this library to work with Robolectric 3.0 when your API level >= 23.
    //the HttpClient has been removed as of API Level 23, but Robolectric is automatically
    //shadowing this class. So add it, even though you're not using it.
//    useLibrary 'org.apache.http.legacy'
}

//android.testOptions.unitTests.all {
//    // configure the set of classes for JUnit tests
//    include '**/*Test.class'
//    //exclude '**/espresso/**/*.class'
//
//    // configure max heap size of the test JVM
//    maxHeapSize = "2048m"
//}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.robolectric:robolectric:3.0'

    compile 'com.android.support:recyclerview-v7:23.0.0'
    compile 'com.android.support:appcompat-v7:23.0.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'io.reactivex:rxandroid:1.1.0'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.android.support:support-v4:23.0.0'
}


//start jacoco
apply plugin: 'jacoco'


def coverageSourceDirs = [
        'src/main/java'
]

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug',
            includes: [
                    'demo/thanhbc/com/popularmovies/**/*.class'
            ],
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    sourceDirectories = files(coverageSourceDirs)
    executionData = files("$buildDir/jacoco/testDebugUnitTest.exec")

    def renamedFilesMap = [:]

    // Hacky fix for issue: https://code.google.com/p/android/issues/detail?id=69174.
    // Rename files with '$$' before generating report, and then rename back after
    doFirst {
        new File('app/build/intermediates/classes/debug').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                def oldPath = file.path
                def newPath = oldPath.replace('$$', '$')
                file.renameTo(newPath)
                renamedFilesMap[newPath] = oldPath
            }
        }
    }

    doLast {
        renamedFilesMap.each() {
            newPath, oldPath ->
                new File(newPath).renameTo(oldPath)
        }
    }

    reports {
        xml.enabled = false
        html.enabled = true
    }

}

//end jacoco